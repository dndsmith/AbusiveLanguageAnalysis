import boto3
import sys
import magic
import subprocess
import codecs


# finds the file extension
def findMimeType(inFile):
    mime = magic.Magic(mime=True)
    fileMime = mime.from_file(inFile)
    fileType = fileMime.split('/')

    # returns file type
    return fileType[0]


def transcribe(bucketname, filename):
    transcribe = boto3.client('transcribe')
    jobName = "transcribe speech"

    # link to s3 endpoint
    jobURI = "s3://" + bucketname + "/" + filename

    # transcribe audio and outputs transcript into s3 bucket
    transcribe.start_transcription_job(
        TranscriptionJobName=jobName,
        LanguageCode='en-US',
        Media={'MediaFileUri': jobURI},
        OutputBucketName=bucketname
    )


def rekognition(bucketname, file):
    fullText = ''

    rekognition = boto3.client('rekognition')
    # looking at object
    response = rekognition.detect_text(Image={'S3Object': {'Bucket': bucketname, 'Name': file}})
    textDectections = response['TextDetections']

    # printing out detected text in photos
    for text in textDectections:
        fullText = fullText + text['DetectedText'] + ' '

    # create text file from the detected photo
    outfile = open('rekognition.txt', 'w')
    outfile.write(fullText)
    uploadS3(bucketname, outfile)


# speech to text
def polly(textFile):
    cnt = 0
    file_names = ''

    for line in textFile:
        rendered = ''
        line = line.replace('"', '\\"')
        command = 'aws polly synthesize-speech --text-type ssml --output-format "mp3" --voice-id "Salli" --text "{0}" {1}'

        if '\r\n' == line:
            # A pause after a paragraph
            rendered = '<speak><break time= "2s"/></speak>'
        else:
            # A pause after a sentence
            rendered = '<speak><amazon:effect name=\\"drc\\">' + line.strip() + '<break time=\\"1s\\"/></amazon:effect></speak>'

        file_name = ' polly_out{0}.mp3'.format(u''.join(str(cnt)).encode('utf-8'))
        cnt += 1
        command = command.format(rendered.encode('utf-8'), file_name)
        file_names += file_name
        print(command)
        subprocess.call(command, shell=True)

    print(file_names)
    execute_command = 'cat ' + file_names + '>result.mp3'
    subprocess.call(execute_command, shell=True)

    execute_command = 'rm ' + file_names
    print('Removing temporary files: ' + execute_command)
    subprocess.call(execute_command, shell=True)




def uploadS3(bucketname, filename):
    s3 = boto3.client('s3')
    # upload to s3
    s3.upload_file(filename, bucketname, filename)


if __name__ == '__main__':
    bucketname = 'hackgtfiles'

    # get file type
    inFile = sys.argv[1]
    fileType = findMimeType(inFile)

    if fileType == 'image':
        uploadS3(bucketname, inFile)
        rekognition(bucketname, inFile)
    elif fileType[0] == 'text' or 'application':
        polly(inFile)
    elif fileType == 'audio':
        uploadS3(bucketname, inFile)
        transcribe(bucketname, inFile)
    else:
        print("Sorry, we do not accept this file type")
