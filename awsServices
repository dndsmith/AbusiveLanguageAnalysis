from __future__ import print_function
import boto3
from boto3 import Session
import json
import sys
import magic
import subprocess
import codecs
import time

bucketname = 'hackgt6files'

# finds the file extension
def findMimeType(inFile):
    mime = magic.Magic(mime=True)
    fileMime = mime.from_file(inFile)
    fileType = fileMime.split('/')

    # returns file type
    return fileType[0]


def uploadS3(filename):
    s3 = boto3.client('s3')
    # upload to s3
    s3.upload_file(filename, bucketname, filename)


def transcribe(filename):
    text =''
    i = 0
    bool = True
    
    transcribe = boto3.client('transcribe')
    
    uploadS3(bucketname, filename)
    file = filename.split('.')

    jobName = file[0] + "-transcribe-speech"

    # link to s3 endpoint
    jobURI = "s3://" + bucketname + "/" + filename

    # transcribe audio and outputs transcript into s3 bucket
    output = transcribe.start_transcription_job(
        TranscriptionJobName=jobName,
        LanguageCode='en-US',
        Media={'MediaFileUri': jobURI},
        OutputBucketName=bucketname
    )

    while True:
        status = transcribe.get_transcription_job(TranscriptionJobName=jobName)
        if status['TranscriptionJob']['TranscriptionJobStatus'] in ['COMPLETED', 'FAILED']:
            break
        print("Not ready yet...")
        time.sleep(5)

    name = jobName + '.json'

    s3 = boto3.resource('s3')
    bucket = s3.Bucket(bucketname)

    for obj in bucket.objects.all():
        key = obj.key
        if key == name:
            body = obj.get()['Body'].read().decode('utf-8')

            while bool == True:
                if body[i - 2] == '[':
                    while True:
                        text = text + body[i]
                        if body[i + 2] == ']':
                            bool = False
                            break
                        i = i + 1
                i = i + 1

            temp = text.split(':')
            cleanText = temp[1]
            transcript = cleanText[1:-1]
            
    return transcript


#image to text detection
def rekognition(file):
    uploadS3(bucketname, file)
    fullText = ''

    rekognition = boto3.client('rekognition')
    # looking at object
    response = rekognition.detect_text(Image={'S3Object': {'Bucket': bucketname, 'Name': file}})
    textDectections = response['TextDetections']

    # printing out detected text in photos
    for text in textDectections:
        fullText = fullText + text['DetectedText'] + ' '

    return fullText


# speech to text
def polly(textFile, keyFile):
    #cnt = 0
    #file_names = ''
    with open(keyFile, 'r') as f:
        allKeys = f.read()
    key = allKeys.split(',')
    
    polly = Session(aws_access_key_id=keyFile[0], aws_secret_access_key=keyFile[1], region_name='us-east-1').client('polly')

    with open(textFile, 'r') as file:
        text = file.read()

    response = polly.synthesize_speech(VoiceId='Joanna', OutputFormat='mp3', Text=text)

    fileName = textFile.split('.')
    mp3File = fileName[0] + '.mp3'

    mp3 = open(mp3File, 'wb')
    mp3.write(response['AudioStream'].read())
    mp3.close()

    uploadS3(bucketname, mp3File)
    
    return mp3File

