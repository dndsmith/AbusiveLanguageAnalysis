from __future__ import print_function
import boto3
from boto3 import Session
import json
import sys
import magic
import subprocess
import codecs
import time


# finds the file extension
def findMimeType(inFile):
    mime = magic.Magic(mime=True)
    fileMime = mime.from_file(inFile)
    fileType = fileMime.split('/')

    # returns file type
    return fileType[0]


def uploadS3(bucketname, filename):
    s3 = boto3.client('s3')
    # upload to s3
    s3.upload_file(filename, bucketname, filename)


def transcribe(bucketname, filename):
    transcribe = boto3.client('transcribe')
    file = filename.split('.')

    jobName = file[0] + "-transcribe-speech"

    # link to s3 endpoint
    jobURI = "s3://" + bucketname + "/" + filename

    # transcribe audio and outputs transcript into s3 bucket
    output = transcribe.start_transcription_job(
        TranscriptionJobName=jobName,
        LanguageCode='en-US',
        Media={'MediaFileUri': jobURI},
        OutputBucketName=bucketname
    )

    while True:
        status = transcribe.get_transcription_job(TranscriptionJobName=jobName)
        if status['TranscriptionJob']['TranscriptionJobStatus'] in ['COMPLETED', 'FAILED']:
            break
        print("Not ready yet...")
        time.sleep(5)

    return jobName + '.json'


def rekognition(bucketname, file):
    fullText = ''

    rekognition = boto3.client('rekognition')
    # looking at object
    response = rekognition.detect_text(Image={'S3Object': {'Bucket': bucketname, 'Name': file}})
    textDectections = response['TextDetections']

    # printing out detected text in photos
    for text in textDectections:
        fullText = fullText + text['DetectedText'] + ' '

    # create text file from the detected photo
    print(fullText)
    fileName = file.split('.')
    newFileName = fileName[0] + '.txt'

    outfile = open(newFileName, 'w')
    outfile.write(fullText)
    outfile.close

    return newFileName


# speech to text
def polly(bucketname, textFile, keyFile):
    #cnt = 0
    #file_names = ''
    with open(keyFile, 'r') as f:
        allKeys = f.read()
    key = allKeys.split(',')
    
    polly = Session(aws_access_key_id=keyFile[0], aws_secret_access_key=keyFile[1], region_name='us-east-1').client('polly')

    with open(textFile, 'r') as file:
        text = file.read()

    response = polly.synthesize_speech(VoiceId='Joanna', OutputFormat='mp3', Text=text)

    fileName = textFile.split('.')
    mp3File = fileName[0] + '.mp3'

    mp3 = open(mp3File, 'wb')
    mp3.write(response['AudioStream'].read())
    mp3.close()

    uploadS3(bucketname, mp3File)


if __name__ == '__main__':
    text =''
    i = 0
    bool = True
    bucketname = 'hackgt6files'

    # get file type
    inFile = sys.argv[1]
    fileType = findMimeType(inFile)
    
    # image to text -> polly
    if fileType == 'image':
        uploadS3(bucketname, inFile)
        outfile = rekognition(bucketname, inFile)
        polly(bucketname, outfile, sys.argv[2])

    # text to speech
    elif fileType == 'text':
        polly(bucketname, inFile, sys.argv[2])

    # speech to text back to speech
    elif fileType == 'audio' or 'application':
        # upload first to s3 so that has it has access
        uploadS3(bucketname, inFile)
        out = transcribe(bucketname, inFile)
        s3 = boto3.resource('s3')
        bucket = s3.Bucket(bucketname)

        # read the object that contains the transcript
        for obj in bucket.objects.all():
            key = obj.key
            if key == out:
                body = obj.get()['Body'].read().decode('utf-8')

                # clean the transcript of [] and ""
                while bool == True:
                    if body[i-2] == '[':
                        while True:
                            text = text + body[i]
                            if body[i+2] == ']':
                                bool = False
                                break
                            i = i + 1
                    i = i + 1

                temp = text.split(':')
                cleanText = temp[1]
                transcript = cleanText[1:-1]

                # send it to polly
                outfile = open('file.txt', 'w')
                outfile.write(transcript)
                outfile.close
                polly(bucketname, 'file.txt', sys.argv[2])

    else:
        print("Sorry, we do not accept this file type")

